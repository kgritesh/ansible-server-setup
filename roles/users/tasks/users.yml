- name: Per-user group creation
  group: name="{{item.username}}" gid="{{item.uid | default(omit)}}"
  with_items: users
  when: users_create_per_user_group
  tags: ['users','configuration']


- name: Create Default User Groups
  group: name="{{group}}" gid="{{group.gid | default(omit)}}"
  with_items: user_default_groups
  tags: ['users','configuration']


- name: Get list of available groups
  shell: 'getent group | cut -f1 -d:'
  register: users_register_groups
  changed_when: False
  always_run: yes

- name: User creation
  user: name="{{item.username}}"
        state='{{ item.state | default("present") }}'
        group="{{item.username if users_create_per_user_group else None}}"
        groups="{{ (item.groups | intersect(users_register_groups.stdout_lines)) | join(',')}}"
        password={{ item.password | default(user_default_password_hash)}}
        shell={{item.shell if item.shell is defined else users_default_shell}}
        comment="{{item.name}}"
        uid="{{item.uid | default(omit) }}"
        createhome="{{'yes' if users_create_homedirs else 'no'}}"
  with_items: users
  tags: ['users','configuration']

- name: Manage User Groups
  user:
    name: '{{ item.name }}'
    state: '{{ item.state | default("present") }}'
    append: '{{ users_default_groups_list }}'
  with_items: users
  tags: ['users','configuration']


- name: Add Users to Sudoers
  action: lineinfile dest=/etc/sudoers regexp="{{item.username}} ALL"
          line="{{item.username}} ALL=(ALL)  ALL "
          state=present

  with_items: sudo_users
  when: item.sudo_user
  
- name: Add admin_user group as NOPASSWORD sudoers
  action: lineinfile dest=/etc/sudoers
          line="%{{users_group}} ALL=(ALL:ALL) NOPASSWD:ALL"
          insertafter="EOF"
          state=present
          validate="visudo -cf %s"


- name: SSH keys
  authorized_key: user="{{item.0.username}}" key="{{item.1}}"
  with_subelements:
    - users
    - ssh_key
  tags: ['users','configuration']

- name: Deleted user removal
  user: name="{{item.username}}" state=absent
  with_items: users_deleted
  tags: ['users','configuration']

- name: Deleted per-user group removal
  group: name="{{item.username}}" state=absent
  with_items: users_deleted
  when: users_create_per_user_group
  tags: ['users','configuration']
